{"version":3,"sources":["components/map.js","components/drugstore-card.js","components/city-select.js","App.js","serviceWorker.js","index.js"],"names":["L","window","getColor","d","onEachFeature","feature","layer","popupContent","properties","name","mask_adult","mask_child","bindPopup","Map","props","state","center","this","markerPool","markerClusterGroup","zoomToBoundsOnClick","removeOutsideVisibleBounds","maskMap","map","latitude","longitude","zoom","layers","tileLayer","attribution","locate","setView","maxZoom","on","e","setState","latlng","marker","addTo","openPopup","legend","control","position","onAdd","div","DomUtil","create","grades","labels","i","length","push","innerHTML","join","getLegendControl","customAction","Toolbar2","Action","extend","options","toolbarIcon","html","tooltip","addHooks","setLatLng","flyTo","Control","actions","clearLayers","focus","_focus","LatLng","geoJSON","markersData","style","color","pointToLayer","maskCount","circleMarker","radius","weight","opacity","fillOpacity","fillColor","getStyle","addLayer","id","React","Component","DrugdrugstoreCard","handleClick","drugstore","onClickDrugstore","mask","total","percent","currentLocation","city","district","className","features","address","substring","Card","key","Content","Header","onClick","geometry","Meta","phone","Description","href","target","rel","extra","Progress","getPercent","indicating","SelectCountry","handleCity","value","onSelectCity","currentCity","CITY_AREA","find","item","index","array","districtOptions","districts","text","_district","onSelectDistrict","handleDistrict","cityOptions","Dropdown","button","floating","labeled","scrolling","icon","onChange","App","handleClickDrugstore","coordinates","viewport","visible","fetch","then","response","json","geojson","document","body","classList","add","catch","err","console","log","Button","compact","labelPosition","toggleSidebar","Icon","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.105b9eb6.chunk.js","sourcesContent":["import React from 'react';\n\n// Import CSS from Leaflet and plugins.\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport 'leaflet-toolbar/dist/leaflet.toolbar.css';\n\n// Import JS from Leaflet and plugins.\nimport 'leaflet.markercluster';\nimport 'leaflet-toolbar';\n\nimport '../styles/map.scss';\n\nconst L = window.L;\n\nconst getColor = d => {\n  return d > 200 ? '#7cafc2' : d > 150 ? '#86c1b9' : d > 100 ? '#a1b56c' : d > 50 ? '#f7ca88' : d > 0 ? '#dc9656' : 'rgba(236,222,239,.9)';\n};\n\nconst getStyle = maskCount => {\n  return {\n    radius: 8,\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 1,\n    fillColor: getColor(maskCount)\n  };\n};\n\nconst getLegendControl = () => {\n  //Custom Legend Control.\n  const legend = L.control({ position: 'bottomright' });\n  legend.onAdd = () => {\n    const div = L.DomUtil.create('div', 'legend-panel');\n    const grades = [0, 50, 100, 150, 200];\n    const labels = [];\n\n    for (let i = 0; i < grades.length; i++) {\n      labels.push(`\n        <div class=\"legend-item\">\n          <i style=\"background:${getColor(grades[i] + 1)}\"></i>\n          ${grades[i]}${grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+'}\n        </div>\n      `);\n    }\n    div.innerHTML = labels.join('');\n    return div;\n  };\n  return legend;\n};\n\nconst onEachFeature = (feature, layer) => {\n  const popupContent = `\n      <div class=\"info-window\">\n        <h3>${layer.feature.properties.name}</h3>\n        <p>成人口罩\b：${feature.properties.mask_adult} 個</p>\n        <p>兒童口罩：${feature.properties.mask_child} 個</p>\n      </div>\n    `;\n  layer.bindPopup(popupContent);\n};\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: null\n    };\n  }\n\n  componentDidMount() {\n    this.markerPool = L.markerClusterGroup({\n      zoomToBoundsOnClick: true,\n      removeOutsideVisibleBounds: true\n    });\n\n    // Create map.\n    this.maskMap = L.map('map-canvas', {\n      center: [this.props.latitude, this.props.longitude],\n      zoom: 16,\n      layers: [\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        })\n      ]\n    });\n\n    // Geolocation.\n    this.maskMap.locate({ setView: true, maxZoom: 16 });\n    this.maskMap.on('locationfound', e => {\n      this.setState({ center: e.latlng });\n      // Add marker.\n      this.marker = L.marker(e.latlng)\n        .addTo(this.maskMap)\n        .bindPopup('You are here!')\n        .openPopup();\n    });\n\n    const legend = getLegendControl();\n    legend.addTo(this.maskMap);\n\n    // ToolBar.\n    const customAction = L.Toolbar2.Action.extend({\n      options: {\n        toolbarIcon: {\n          html: '<div><i aria-hidden=\"true\" class=\"teal street view large icon\"></i></div>',\n          tooltip: 'Go to the Eiffel Tower'\n        }\n      },\n      addHooks: () => {\n        this.marker\n          .setLatLng(this.state.center)\n          .bindPopup('You are here!')\n          .openPopup();\n        this.maskMap.flyTo(this.state.center, 18);\n      }\n    });\n    new L.Toolbar2.Control({\n      actions: [customAction]\n    }).addTo(this.maskMap);\n  }\n\n  componentDidUpdate() {\n    this.markerPool.clearLayers();\n\n    if (this.props.focus) {\n      const _focus = new L.LatLng(this.props.focus[1], this.props.focus[0]);\n      this.marker\n        .setLatLng(_focus)\n        .bindPopup(\n          `\n          <a href=https://www.google.com.tw/maps/place/${this.props.focus[1]},${this.props.focus[0]} target=\"_blank\" rel=\"noopener noreferrer\">\n            導航到這\n          </a>\n        `\n        )\n        .openPopup();\n      this.maskMap.flyTo(_focus, 18);\n    }\n\n    L.geoJSON(this.props.markersData, {\n      style: function(feature) {\n        return { color: feature.properties.color };\n      },\n      onEachFeature,\n      pointToLayer: (feature, latlng) => {\n        const maskCount = feature.properties.mask_adult + feature.properties.mask_child;\n        const marker = L.circleMarker(latlng, getStyle(maskCount));\n\n        this.markerPool.addLayer(marker);\n        return marker;\n      }\n    });\n\n    this.maskMap.addLayer(this.markerPool);\n  }\n\n  render() {\n    return <div id=\"map-canvas\"></div>;\n  }\n}\n","import React from 'react';\nimport { Card, Progress, Icon } from 'semantic-ui-react';\n\nexport default class DrugdrugstoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getPercent(mask, total) {\n    let percent = mask / total;\n    return percent > 1 ? 100 : percent * 100;\n  }\n\n  handleClick = (drugstore) => {\n    this.props.onClickDrugstore(drugstore);\n  };\n\n  render() {\n    const currentLocation = `${this.props.city}${this.props.district}`;\n\n    return (\n      <div className=\"floating-panel__list\">\n        {this.props.markersData &&\n          this.props.markersData.features.map(drugstore => {\n            return drugstore.properties.address.substring(0, currentLocation.length) === currentLocation ? (\n              <Card key={drugstore.properties.id}>\n                <Card.Content>\n                  <Card.Header onClick={() => this.handleClick(drugstore.geometry)}>{drugstore.properties.name}</Card.Header>\n                  <Card.Meta>{drugstore.properties.phone}</Card.Meta>\n                  <Card.Description>\n                    <a href={`https://www.google.com.tw/maps/place/${drugstore.properties.address}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                      {drugstore.properties.address}\n                    </a>\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  <Progress percent={this.getPercent(drugstore.properties.mask_adult, 200)} indicating>\n                    成人:{drugstore.properties.mask_adult}\n                  </Progress>\n                  <Progress percent={this.getPercent(drugstore.properties.mask_child, 50)} indicating>\n                    兒童:{drugstore.properties.mask_child}\n                  </Progress>\n                </Card.Content>\n              </Card>\n            ) : null;\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\n\nimport CITY_AREA from '../data/city-area.json';\n\nexport default class SelectCountry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityOptions: CITY_AREA.map(item => ({\n        key: item.id,\n        text: item.name,\n        value: item.name\n      })),\n      districtOptions: [\n        { key: 1, text: '中正區', value: '中正區' },\n        { key: 2, text: '大同區', value: '大同區' },\n        { key: 3, text: '中山區', value: '中山區' },\n        { key: 4, text: '松山區', value: '松山區' },\n        { key: 5, text: '大安區', value: '大安區' },\n        { key: 6, text: '萬華區', value: '萬華區' },\n        { key: 7, text: '信義區', value: '信義區' },\n        { key: 8, text: '士林區', value: '士林區' },\n        { key: 9, text: '北投區', value: '北投區' },\n        { key: 10, text: '內湖區', value: '內湖區' },\n        { key: 11, text: '南港區', value: '南港區' },\n        { key: 12, text: '文山區', value: '文山區' }\n      ],\n      city: '台北市',\n      district: '大安區'\n    };\n  }\n\n  handleCity = (e, { value }) => {\n    this.props.onSelectCity(value);\n\n    const currentCity = CITY_AREA.find(function(item, index, array) {\n      return item.name === value;\n    });\n    this.setState({\n      city: value,\n      districtOptions: currentCity.districts.map(item => ({\n        key: item.id,\n        text: item.name,\n        value: item.name\n      }))\n    });\n\n    if (currentCity.districts && currentCity.districts.length > 1) {\n      const _district = currentCity.districts[0].name;\n      this.setState({\n        district: _district\n      });\n      this.props.onSelectDistrict(_district);\n    }\n  };\n\n  handleDistrict = (e, { value }) => {\n    this.setState({\n      district: value\n    });\n    this.props.onSelectDistrict(value);\n  };\n\n  render() {\n    const { cityOptions, districtOptions, city, district } = this.state;\n\n    return (\n      <div>\n        <Dropdown\n          button\n          className=\"icon teal\"\n          floating\n          labeled\n          scrolling\n          icon=\"map marker alternate\"\n          options={cityOptions}\n          onChange={this.handleCity}\n          text={city}\n        />\n        <Dropdown\n          button\n          className=\"icon teal\"\n          floating\n          labeled\n          scrolling\n          icon=\"map marker alternate\"\n          options={districtOptions}\n          onChange={this.handleDistrict}\n          text={district}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport MaskMap from './components/map';\nimport DrugstoreCard from './components/drugstore-card';\nimport CitySelect from './components/city-select';\n\nimport { Button, Icon } from 'semantic-ui-react';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        latitude: 25.030313,\n        longitude: 121.54924,\n        zoom: 16\n      },\n      drugstore: '',\n      focus: null,\n      visible: false,\n      city: '台北市',\n      district: '大安區'\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json')\n      .then(response => response.json())\n      .then(geojson => {\n        this.setState({ drugstore: geojson });\n        document.body.classList.add('dom-ready');\n      })\n      .catch(err => {\n        console.log('錯誤:', err);\n      });\n  }\n\n  toggleSidebar(visible) {\n    this.setState({ visible: !visible });\n  }\n\n  handleCity = city => {\n    this.setState({ city });\n  };\n\n  handleDistrict = district => {\n    this.setState({ district });\n  };\n\n  handleClickDrugstore = drugstore => {\n    this.setState({\n      focus: drugstore.coordinates\n    });\n  };\n\n  render() {\n    const { viewport, drugstore, city, district, focus } = this.state;\n\n    return (\n      <div className=\"App\">\n        <MaskMap {...viewport} markersData={drugstore} focus={focus}></MaskMap>\n        <div className={this.state.visible ? 'floating-panel is-visible' : 'floating-panel'}>\n          <CitySelect onSelectCity={this.handleCity} onSelectDistrict={this.handleDistrict}></CitySelect>\n          <DrugstoreCard markersData={drugstore} city={city} district={district} onClickDrugstore={this.handleClickDrugstore}></DrugstoreCard>\n          <Button icon compact color=\"teal\" labelPosition=\"right\" className=\"floating-panel__close\" onClick={() => this.toggleSidebar(this.state.visible)}>\n            關閉\n            <Icon name={this.state.visible ? 'angle double right' : 'angle double left'} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}